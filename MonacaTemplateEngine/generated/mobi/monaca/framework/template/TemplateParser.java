
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 11 23:26:49 JST 2012
//----------------------------------------------------

package mobi.monaca.framework.template;

import java_cup.runtime.*;
import mobi.monaca.framework.template.*;
import mobi.monaca.framework.template.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 11 23:26:49 JST 2012
  */
public class TemplateParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TemplateParser() {super();}

  /** Constructor which sets the default scanner. */
  public TemplateParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TemplateParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\003\004\000\002\003\002\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\004\003" +
    "\000\002\004\004\000\002\024\003\000\002\024\003\000" +
    "\002\011\004\000\002\010\004\000\002\012\003\000\002" +
    "\013\003\000\002\014\005\000\002\015\005\000\002\015" +
    "\002\000\002\016\007\000\002\023\006\000\002\023\004" +
    "\000\002\023\002\000\002\025\003\000\002\025\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\005\000\002\020\005\000\002\020" +
    "\003\000\002\022\004\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\020\002\uffff\004\uffff\006\uffff\010\uffff\016" +
    "\uffff\027\uffff\031\uffff\001\002\000\020\002\013\004\016" +
    "\006\006\010\014\016\010\027\017\031\012\001\002\000" +
    "\020\002\ufffd\004\ufffd\006\ufffd\010\ufffd\016\ufffd\027\ufffd" +
    "\031\ufffd\001\002\000\004\030\110\001\002\000\020\002" +
    "\ufffe\004\ufffe\006\ufffe\010\ufffe\016\ufffe\027\ufffe\031\ufffe" +
    "\001\002\000\012\022\043\026\044\030\050\032\046\001" +
    "\002\000\020\002\ufffa\004\ufffa\006\ufffa\010\ufffa\016\ufffa" +
    "\027\ufffa\031\ufffa\001\002\000\034\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\027\uffe8\031\uffe8\001\002\000\004\002" +
    "\000\001\002\000\012\022\043\026\044\030\050\032\046" +
    "\001\002\000\020\002\ufffc\004\ufffc\006\ufffc\010\ufffc\016" +
    "\ufffc\027\ufffc\031\ufffc\001\002\000\004\032\024\001\002" +
    "\000\004\030\023\001\002\000\020\002\001\004\001\006" +
    "\001\010\001\016\001\027\001\031\001\001\002\000\020" +
    "\002\ufffb\004\ufffb\006\ufffb\010\ufffb\016\ufffb\027\ufffb\031" +
    "\ufffb\001\002\000\020\002\ufff9\004\ufff9\006\ufff9\010\ufff9" +
    "\016\ufff9\027\ufff9\031\ufff9\001\002\000\034\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\027\uffea\031\uffea\001\002\000" +
    "\024\004\ufff7\005\ufff7\007\ufff7\010\ufff7\012\ufff7\016\ufff7" +
    "\027\ufff7\030\026\031\ufff7\001\002\000\022\004\016\005" +
    "\033\007\031\010\014\012\036\016\010\027\017\031\012" +
    "\001\002\000\034\002\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\027\uffef\031\uffef\001\002\000\034\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\027\ufff0\031\ufff0\001\002\000\030\004" +
    "\ufff5\005\ufff5\007\ufff5\010\ufff5\012\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\027\ufff5\031\ufff5\001\002\000\030\004" +
    "\uffe9\005\uffe9\007\uffe9\010\uffe9\012\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\027\uffe9\031\uffe9\001\002\000\030\004" +
    "\ufff2\005\ufff2\007\ufff2\010\ufff2\012\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\027\ufff2\031\ufff2\001\002\000\034\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\027\uffec\031\uffec\001" +
    "\002\000\030\004\ufff8\005\ufff8\007\ufff8\010\ufff8\012\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\027\ufff8\031\ufff8\001" +
    "\002\000\030\004\ufff6\005\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\027\ufff6\031\ufff6\001" +
    "\002\000\034\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\016\uffed\017\uffed\020\uffed\021\uffed\027" +
    "\uffed\031\uffed\001\002\000\030\004\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\027" +
    "\ufff4\031\ufff4\001\002\000\034\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\027\uffee\031\uffee\001\002\000\030\004\ufff1" +
    "\005\ufff1\007\ufff1\010\ufff1\012\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\027\ufff1\031\ufff1\001\002\000\030\004\ufff3" +
    "\005\ufff3\007\ufff3\010\ufff3\012\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\027\ufff3\031\ufff3\001\002\000\012\022\043" +
    "\026\044\030\050\032\046\001\002\000\012\022\043\026" +
    "\044\030\050\032\046\001\002\000\052\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\067\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\027\uffdc\031\uffdc\001\002\000" +
    "\052\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8" +
    "\031\uffd8\001\002\000\050\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde\025" +
    "\uffde\027\uffde\031\uffde\001\002\000\050\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\027\uffdb\031\uffdb\001\002\000\046\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5" +
    "\013\056\014\054\015\057\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\024\053\025\055\027\uffe5\031\uffe5\001\002\000\050" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\031\uffdd\001" +
    "\002\000\012\022\043\026\044\030\050\032\046\001\002" +
    "\000\004\032\064\001\002\000\012\022\043\026\044\030" +
    "\050\032\046\001\002\000\012\022\043\026\044\030\050" +
    "\032\046\001\002\000\012\022\043\026\044\030\050\032" +
    "\046\001\002\000\034\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\012\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\027\uffe7\031\uffe7\001\002\000\050\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5" +
    "\024\053\025\055\027\uffd5\031\uffd5\001\002\000\050\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\024\053\025\055\027\uffd6\031\uffd6\001\002" +
    "\000\050\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\031" +
    "\uffd3\001\002\000\036\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\014\054\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\027\uffe5\031\uffe5\001\002\000\034\002\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\027\uffe6\031\uffe6\001\002" +
    "\000\050\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\031" +
    "\uffd4\001\002\000\004\032\070\001\002\000\052\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\031\uffd9\001" +
    "\002\000\050\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\012\uffd7\013\056\014\uffd7\015\057\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\053\025\055\027\uffd7" +
    "\031\uffd7\001\002\000\014\013\056\015\057\023\073\024" +
    "\053\025\055\001\002\000\050\002\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\031\uffda\001\002\000\036\004\ufff7\007" +
    "\ufff7\010\ufff7\012\ufff7\013\056\015\057\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\024\053\025\055\027\ufff7\031\ufff7\001" +
    "\002\000\026\004\016\007\031\010\014\012\uffe1\016\010" +
    "\017\100\020\076\021\uffe1\027\017\031\012\001\002\000" +
    "\022\004\ufff7\007\ufff7\010\ufff7\012\ufff7\016\ufff7\021\ufff7" +
    "\027\ufff7\031\ufff7\001\002\000\006\012\106\021\105\001" +
    "\002\000\012\022\043\026\044\030\050\032\046\001\002" +
    "\000\036\004\ufff7\007\ufff7\010\ufff7\012\ufff7\013\056\015" +
    "\057\016\ufff7\017\ufff7\020\ufff7\021\ufff7\024\053\025\055" +
    "\027\ufff7\031\ufff7\001\002\000\026\004\016\007\031\010" +
    "\014\012\uffe1\016\010\017\100\020\076\021\uffe1\027\017" +
    "\031\012\001\002\000\006\012\uffe3\021\uffe3\001\002\000" +
    "\034\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\027\uffe4\031" +
    "\uffe4\001\002\000\034\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\027\uffdf\031\uffdf\001\002\000\034\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\027\uffe0\031\uffe0\001\002\000\022" +
    "\004\016\007\031\010\014\012\uffe2\016\010\021\uffe2\027" +
    "\017\031\012\001\002\000\020\002\uffeb\004\uffeb\006\uffeb" +
    "\010\uffeb\016\uffeb\027\uffeb\031\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\002\003\001\001\000\020\005\017\007" +
    "\004\010\014\011\006\013\020\014\010\016\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\073\020\044\021\046\022\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\050\020\044\021\046\022\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\024\004\026\001\001\000\022\006\033\007\027\010" +
    "\036\012\034\013\041\014\031\016\040\024\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\071\020\044\021\046\022\051\001\001\000" +
    "\012\017\070\020\044\021\046\022\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\057\001\001\000\002\001\001\000\012" +
    "\017\065\020\044\021\046\022\051\001\001\000\002\001" +
    "\001\000\012\017\062\020\044\021\046\022\051\001\001" +
    "\000\012\017\061\020\044\021\046\022\051\001\001\000" +
    "\012\017\060\020\044\021\046\022\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\074" +
    "\001\001\000\022\006\033\007\027\010\036\012\034\013" +
    "\041\014\031\016\040\023\076\001\001\000\004\003\106" +
    "\001\001\000\004\025\103\001\001\000\012\017\100\020" +
    "\044\021\046\022\051\001\001\000\004\003\101\001\001" +
    "\000\022\006\033\007\027\010\036\012\034\013\041\014" +
    "\031\016\040\023\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\033\007\027\010\036\012\034\013\041\014\031\016\040" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TemplateParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TemplateParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TemplateParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    @Override
    public void report_error(String message, Object info) {
        StringBuilder builder = new StringBuilder();
        builder.append(message);
        
        if (!(info instanceof Symbol)) {
            throw new ParserError(builder.toString(), getTemplatePath(), 0);
        }

        Symbol symbol = (Symbol) info;
        
        if (symbol.left < 0 || symbol.right < 0) {
            throw new ParserError(builder.toString(), getTemplatePath(), 0);
        }
        
        builder.append("Unexpected token: " + (LexerDumper.getSymbolName(symbol.sym)));

        throw new ParserError(builder.toString(), getTemplatePath(), symbol.left);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    public String getTemplatePath() {
        return ((TemplateLexer)getScanner()).getTemplatePath();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TemplateParser$actions {
  private final TemplateParser parser;

  /** Constructor */
  CUP$TemplateParser$actions(TemplateParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TemplateParser$do_action(
    int                        CUP$TemplateParser$act_num,
    java_cup.runtime.lr_parser CUP$TemplateParser$parser,
    java.util.Stack            CUP$TemplateParser$stack,
    int                        CUP$TemplateParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TemplateParser$result;

      /* select the action based on the action number */
      switch (CUP$TemplateParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binary_operation ::= expression T_OR expression 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = ShortCircuitBinaryOperationNode.buildOr(left, right); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("binary_operation",15, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binary_operation ::= expression T_AND expression 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = ShortCircuitBinaryOperationNode.buildAnd(left, right); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("binary_operation",15, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binary_operation ::= expression T_NOTEQUAL expression 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = BinaryOperationNode.buildNotEqual(left, right); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("binary_operation",15, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binary_operation ::= expression T_EQUAL expression 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = BinaryOperationNode.buildEqual(left, right); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("binary_operation",15, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unary_operation ::= T_NOT expression 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = UnaryOperationNode.buildNot(expr); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("unary_operation",16, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // constant ::= T_ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new ConstantValueNode(id); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // constant ::= constant T_DOT T_ID 
            {
              Node RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		Node left = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new ConstantValueNode((ConstantValueNode)left, id); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= T_OPENPAREN expression T_CLOSEPAREN 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		 RESULT = expr; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= T_STRING 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new StringValueNode(str); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= constant 
            {
              Node RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node constant = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = constant; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= unary_operation 
            {
              Node RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = node; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= binary_operation 
            {
              Node RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = node; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_end ::= T_ENDIF 
            {
              Object RESULT =null;

              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("if_end",19, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_end ::= T_END 
            {
              Object RESULT =null;

              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("if_end",19, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_content ::= 
            {
              Node RESULT =null;
		 RESULT = new StatementsNode(); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("if_content",17, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_content ::= T_ELSE statements 
            {
              Node RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		StatementsNode stmts = (StatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmts; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("if_content",17, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_content ::= T_ELSEIF expression statements if_content 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		StatementsNode stmts = (StatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		int else_stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int else_stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node else_stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new IfStatementNode(expr, stmts, else_stmt); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("if_content",17, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-3)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_statement ::= T_IF expression statements if_content if_end 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).right;
		StatementsNode stmts = (StatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)).value;
		int else_stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int else_stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		Node else_stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		 RESULT = new IfStatementNode(expr, stmts, else_stmt); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-4)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pipe_syntax ::= 
            {
              Node RESULT =null;
		 RESULT = new PipeModifiers(); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("pipe_syntax",11, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pipe_syntax ::= T_PIPE T_ID pipe_syntax 
            {
              Node RESULT =null;
		int modifier_tokenleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int modifier_tokenright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		Token modifier_token = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new PipeModifiers(modifier_token, (PipeModifiers)right); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("pipe_syntax",11, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // echo_statement ::= T_ECHO expression pipe_syntax 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		int pipe_modifiersleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int pipe_modifiersright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node pipe_modifiers = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new EchoStatementNode(expr, (PipeModifiers)pipe_modifiers); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("echo_statement",10, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // raw_statement ::= T_RAW 
            {
              Node RESULT =null;
		int rawleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rawright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token raw = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new RawStatementNode(raw); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("raw_statement",9, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parent_statement ::= T_PARENT 
            {
              Node RESULT =null;
		 RESULT = new ParentStatementNode(); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("parent_statement",8, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // include_statement ::= T_INCLUDE T_STRING 
            {
              Node RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token path = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new IncludeStatementNode(path); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("include_statement",6, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // extends_statement ::= T_EXTENDS T_STRING 
            {
              Node RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token path = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new ExtendsStatementNode(path); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("extends_statement",7, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block_end ::= T_ENDBLOCK 
            {
              Object RESULT =null;

              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("block_end",18, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block_end ::= T_END 
            {
              Object RESULT =null;

              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("block_end",18, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block_content ::= statements block_end 
            {
              StatementsNode RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		StatementsNode stmts = (StatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		 RESULT = stmts; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("block_content",2, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block_content ::= T_STRING 
            {
              StatementsNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = StatementsNode.buildFrom(str); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("block_content",2, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block_statement ::= T_BLOCK T_ID block_content 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		StatementsNode stmts = (StatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new BlockStatementNode(id, stmts); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("block_statement",5, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-2)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= if_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= echo_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= raw_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= include_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= block_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= parent_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements ::= 
            {
              StatementsNode RESULT =null;
		 RESULT = new StatementsNode(); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statements ::= statements statement 
            {
              StatementsNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		StatementsNode left = (StatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new StatementsNode(left, right); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= if_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statement",3, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= echo_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statement",3, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= raw_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statement",3, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= include_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statement",3, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= block_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statement",3, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement ::= extends_statement 
            {
              Node RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node stmt = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statement",3, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statements ::= 
            {
              TopStatementsNode RESULT =null;
		 RESULT = new TopStatementsNode(); 
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statements",0, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= top_statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		TopStatementsNode start_val = (TopStatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		RESULT = start_val;
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TemplateParser$parser.done_parsing();
          return CUP$TemplateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // top_statements ::= top_statements top_statement 
            {
              TopStatementsNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).right;
		TopStatementsNode left = (TopStatementsNode)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()).right;
		Node right = (Node)((java_cup.runtime.Symbol) CUP$TemplateParser$stack.peek()).value;
		 RESULT = new TopStatementsNode(left, right);  
              CUP$TemplateParser$result = parser.getSymbolFactory().newSymbol("top_statements",0, ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.elementAt(CUP$TemplateParser$top-1)), ((java_cup.runtime.Symbol)CUP$TemplateParser$stack.peek()), RESULT);
            }
          return CUP$TemplateParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

